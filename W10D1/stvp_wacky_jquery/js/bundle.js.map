{"version":3,"file":"bundle.js","mappings":"UAEIA,E,WCAJ,SAASA,EAAKC,GACZC,KAAKD,IAAMA,EACXC,KAAKC,aAGPC,OAAOC,mBAAqB,WAC1B,MAAO,IAAMC,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAGlDT,EAAKU,UAAUC,UAAY,WAMzBC,EAAE,MAAMC,YAAY,WAGtBb,EAAKU,UAAUI,UAAY,WAKzBF,EAAE,MAAMG,SAAS,WAGnBf,EAAKU,UAAUM,UAAY,WAKzBJ,EAAE,MAAMK,UAGVjB,EAAKU,UAAUQ,UAAY,WAKzB,MAAMC,EAAKP,EAAE,iDACbQ,QAAUR,EAAE,OAAOS,OACnBD,QAAQE,MAAMH,IAGhBnB,EAAKU,UAAUa,UAAY,WAKzBC,IAAMZ,EAAE,kBACR,MAAMa,EAAQb,EAAE,wCAChBY,IAAIE,OAAOD,IAGbzB,EAAKU,UAAUiB,UAAY,WAWzBf,EAAE,MAAMgB,GAAG,YAAY,MAAKC,IAC1B,MAAML,EAAMZ,EAAEiB,EAAMC,eACpBC,MAAMP,EAAIQ,KAAK,YAKnBhC,EAAKU,UAAUuB,UAAY,WAQZrB,EAAE,MAAMsB,UACdC,SAASC,IACZxB,EAAEwB,GAAIC,IAAI,mBAAoBjC,OAAOC,0BAO3CL,EAAKU,UAAU4B,UAAY,WAQzB1B,EAAE,MAAMgB,GAAG,YAAY,MAAKC,IAC1B,MACMU,EADM3B,EAAEiB,EAAMC,eACFO,IAAI,oBACtBG,QAAQC,IAAIF,OAMhBvC,EAAKU,UAAUP,WAAa,WAC1B,MAAMuC,EAAgB9B,EAAE,YAAY+B,KAAK,aACzCzC,KAAKD,IAAIyB,OAAOgB,GAChBA,EAAcd,GAAG,QAAS1B,KAAK0C,OAAOC,KAAK3C,OAE3C,IAAI,IAAI4C,EAAI,EAAGA,GAAK,EAAGA,IAAI,CACzB,MAAMC,EAAUnC,EAAE,YAAY+B,KAAK,YAAcG,GACjDC,EAAQnB,GAAG,QAAS1B,KAAK,WAAa4C,IACtC5C,KAAKD,IAAIyB,OAAOqB,GAGlB,IAAI,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACrB9C,KAAK0C,UAIT5C,EAAKU,UAAUkC,OAAS,WACtB,MAAMK,EAAS/C,KAAKD,IAAIiD,KAAK,QAAQC,OAC/BC,EAAOxC,EAAE,QAAQG,SAAS,OAAOA,SAAS,SAChD,IAAI,IAAIsC,EAAS,EAAGA,EAAS,GAAIA,IAAU,CACzC,MAAMC,EAAU1C,EAAE,QAAQG,SAAS,UAAUwC,KAAK,WAAY,CAACN,EAAQI,IACvEC,EAAQ1B,GAAG,cAAe4B,IACR5C,EAAE4C,EAAE1B,eACZO,IAAI,mBAAoBjC,OAAOC,yBAEzC+C,EAAK1B,OAAO4B,GAEdpD,KAAKD,IAAIyB,OAAO0B,IAGlBK,EAAOC,QAAU1D,ICzIb2D,EAA2B,GFC3B3D,EEEJ,SAAS4D,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaJ,QAGrB,IAAID,EAASE,EAAyBE,GAAY,CAGjDH,QAAS,IAOV,OAHAM,EAAoBH,GAAUJ,EAAQA,EAAOC,QAASE,GAG/CH,EAAOC,QFnBJ,CAAQ,KAEnB9C,GAAE,WACA,IAAIqD,EAASrD,EAAE,UACf,IAAIZ,EAAKiE,O","sources":["./js/main.js","./js/view.js","webpack/bootstrap"],"sourcesContent":["/* globals $ */\n\nvar View = require(\"./view\");\n\n$(function () {\n  var $easel = $(\"#easel\");\n  new View($easel);\n});\n","/* jshint esversion: 6 */\n\nfunction View($el) {\n  this.$el = $el;\n  this.setupEasel();\n}\n\nwindow._randomColorString = function(){\n  return '#' + Math.random().toString(16).substr(-6);\n};\n\nView.prototype.exercise0 = function () {\n  //Challenge: (example) remove the 'square' class from every li\n  //Result: this should cause the grid to turn into a long list of undecorated lis\n  //just a list of dots\n\n  //this one completed as an example :) no additional code necessary\n  $('li').removeClass(\"square\");\n};\n\nView.prototype.exercise1 = function () {\n  //Challenge: Give every square the class 'orange'\n  //Result: Every square should turn orange (we already have a CSS rule)\n  \n  //your code here!\n  $('li').addClass('orange');\n};\n\nView.prototype.exercise2 = function () {\n  //Challenge: Remove every square\n  //Result: Every square vanishes\n\n  //your code here!\n  $('li').remove();\n};\n\nView.prototype.exercise3 = function () {\n  //Challenge: Add an <h1> with the text 'i love jquery' under the grid.\n  //Result: An <h1> with the text 'i love jquery' appears under the grid.\n\n  //your code here!\n  const $h1= $(\"<h1 style='text-align:center'>I love you!<h1>\");\n  $lastUl = $('div').last();\n  $lastUl.after($h1);\n};\n\nView.prototype.exercise4 = function () {\n  //Challenge: Write your first name in every other square.\n  //Result: Your name appears in every other square.\n\n  //your code here!\n  $li = $('li.square:even');\n  const $name = $(\"<p style='font-size:8px'>Stephen</p>\");\n  $li.append($name);\n};\n\nView.prototype.exercise5 = function () {\n  //Challenge: Alert the row and column of the square, when the square is clicked.\n  //Result: When a square is clicked, the row and column appear in an alert. for\n  //example: clicking the top left square should alert '0, 0'.\n\n  //hint: checkout the addRow function at the bottom of the file: we set the\n  //  'data-pos' of every square\n\n  //your code here!\n\n\n  $(\"ul\").on(\"mouseover\",\"li\",event=>{\n    const $li = $(event.currentTarget);\n    alert($li.data('pos'));\n  })\n  \n};\n\nView.prototype.exercise6 = function () {\n  //Challenge: Give every square a random color!\n  //Result: Every square becomes a color as soon as this code runs. The grid\n  //should become a beautiful rainbow of colors.\n\n  //hint: use window._randomColorString() (defined at top) to get a random color!\n\n  //your code here!\n  const $lis = $('li').toArray();\n    $lis.forEach((el)=>{\n      $(el).css('background-color', window._randomColorString());\n    })\n    \n\n  \n};\n\nView.prototype.exercise7 = function(){\n  //Challenge: When your mouse goes over a square, console log its color.\n  //Result: When the mouse goes over a square its color should appear in the\n  //console. The color won't be the color's name, but its rbg value.\n  //You should push the button for exercise 6 first to try it on the\n  //rainbow.\n\n  //your code here!\n  $(\"ul\").on('mouseover',\"li\",event=>{\n    const $li = $(event.currentTarget);\n    const color = $li.css(\"background-color\");\n    console.log(color);\n  })\n};\n\n\n\nView.prototype.setupEasel = function() {\n  const $addRowButton = $('<button>').html('Add a row');\n  this.$el.append($addRowButton);\n  $addRowButton.on(\"click\", this.addRow.bind(this));\n\n  for(let j = 0; j <= 7; j++){\n    const $button = $(\"<button>\").html(\"Exercise \" + j);\n    $button.on(\"click\", this[\"exercise\" + j]);\n    this.$el.append($button);\n  }\n\n  for(let i = 0; i < 20; i ++) {\n    this.addRow();\n  }\n};\n\nView.prototype.addRow = function() {\n  const rowIdx = this.$el.find(\".row\").length;\n  const $row = $(\"<ul>\").addClass(\"row\").addClass(\"group\");\n  for(let colIdx = 0; colIdx < 20; colIdx++) {\n    const $square = $(\"<li>\").addClass(\"square\").attr(\"data-pos\", [rowIdx, colIdx]);\n    $square.on(\"mouseenter\", (e) => {\n      const $square = $(e.currentTarget);\n      $square.css(\"background-color\", window._randomColorString());\n    });\n    $row.append($square);\n  }\n  this.$el.append($row);\n};\n\nmodule.exports = View;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["View","$el","this","setupEasel","window","_randomColorString","Math","random","toString","substr","prototype","exercise0","$","removeClass","exercise1","addClass","exercise2","remove","exercise3","$h1","$lastUl","last","after","exercise4","$li","$name","append","exercise5","on","event","currentTarget","alert","data","exercise6","toArray","forEach","el","css","exercise7","color","console","log","$addRowButton","html","addRow","bind","j","$button","i","rowIdx","find","length","$row","colIdx","$square","attr","e","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","$easel"],"sourceRoot":""}